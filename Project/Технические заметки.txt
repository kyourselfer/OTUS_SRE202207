1 этап
  - Запустить k3s/minikube
    -
  - Настроить prometheus operator
    - Chelm chart
  # metrics-server не нужен в prom-stack включён
  # Проверка PV. https://platform9.com/blog/tutorial-dynamic-provisioning-of-persistent-storage-in-kubernetes-with-minikube/
  # Ставим helm.
  # Смотрим матрицу совместимости https://github.com/prometheus-operator/kube-prometheus#kubernetes-compatibility-matrix
  # ? k8s 1.23 == prom-stack release-0.11
  # grafana: admin/otusotus

  - Настроить grafana oncall (взглянуть habra статьи по настройке)
  # https://github.com/grafana/oncall
  # https://habr.com/ru/post/688794/, https://raw.githubusercontent.com/grafana/oncall/dev/docs/img/architecture_diagram.png
    - Настроить escalation chain добавление узла в кластер на тригер перегрузки кластера
  #


  - Запустить DevOps CI/CD для вашего кода
  - Automate infrastructure scaling `не реализуемо исходя из возможностей инфраструктуры`
  - Как вы будете соблюдать правило 50/50 ( стратегия ) `нужно ознакомиться/вспомнить`
  - Проведите SRE тренинг для других команд (pdf презентация)
2 этап
  - Определите SLA,SLO,SLI. Чем вы руководствовались, с кем вы общались в компании?
  - Измерьте поведение Вашей системы на соответствие SL*. Как вы этого добьетесь?
  - Определите Error-Budgeet (velocity vs quality)
  - Определите OKR для SRE `нужно ознакомиться/вспомнить`
3 этап
  - Внедрите мониторинг
  - Golden signals: latency, saturation, traffic, errors
  - В процессе релиза упал memcached. Выпустите Blameles postmortem `со стороны app не имею кэширующего функционала для redis/memcached`
  - Исправьте архитектуру чтобы этого больше не происходило
4 этап
  - Проверьте что падение memcached больше не ломает систему. проведите эксперимент `со стороны app не имею кэширующего функционала для redis/memcached`
  - Handle improvement discussion `нужно ознакомиться/вспомнить`
  - Response scenarios based on proactive monitoring `нужно ознакомиться/вспомнить`